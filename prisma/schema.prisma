generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model group {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar
  users user[]
}

model position {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar
  users user[]
}

model position_level {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar
  users user[]
}

model room {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar
  image_url     String         @db.VarChar
  capacity      Int
  has_equipment Boolean
  bookings      room_booking[]
}

model room_booking {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId         Int
  roomId         Int
  meeting_title  String   @db.VarChar
  attendees      Int
  start_datetime DateTime @db.Timestamptz()
  end_datetime   DateTime @db.Timestamptz()
  need_equipment Boolean
  notes          String?  @db.VarChar

  user       user            @relation(fields: [userId], references: [id])
  room       room            @relation(fields: [roomId], references: [id])
  conference conference_req?
}

model user {
  id                 Int      @id @default(autoincrement())
  username           String   @unique @db.VarChar
  password           String   @db.VarChar
  email              String   @unique @db.VarChar
  prefix             String   @db.VarChar
  thai_f_name        String   @db.VarChar
  thai_l_name        String   @db.VarChar
  eng_f_name         String   @db.VarChar
  eng_l_name         String   @db.VarChar
  phone              String   @db.VarChar
  line_id            String   @db.VarChar
  role               String   @default("user") @db.VarChar
  status             Boolean  @default(false)
  groupId            Int
  positionId         Int
  position_levelId   Int
  avatar_id          String   @db.VarChar
  create_at          DateTime @default(now()) @db.Timestamptz()
  hashedRefreshToken String?  @db.VarChar

  group          group            @relation(fields: [groupId], references: [id])
  position       position         @relation(fields: [positionId], references: [id])
  position_level position_level   @relation(fields: [position_levelId], references: [id])
  bookings       room_booking[]
  repairs        repair_req[]
  conferences    conference_req[]
}

model repair_req {
  ticketId    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      Int
  device      String
  problem     String
  description String?
  create_at   DateTime @default(now()) @db.Timestamptz()

  user user @relation(fields: [userId], references: [id])
}

model conference_req {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bookingId        String?  @unique @db.Uuid
  userId           Int
  meeting_title    String   @db.VarChar()
  meeting_password String
  start_datetime   DateTime @db.Timestamptz()
  end_datetime     DateTime @db.Timestamptz()
  equipment        String
  app              String?
  app_username     String?

  booking room_booking? @relation(fields: [bookingId], references: [id])
  user    user?         @relation(fields: [userId], references: [id])
}

model conference_res {
  id                String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  conference_req_id String
  meeting_title     String
  meeting_password  String
  meeting_link      String
  meeting_number    String @db.VarChar()
}
